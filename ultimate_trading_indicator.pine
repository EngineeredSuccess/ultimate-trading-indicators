//@version=5
indicator("Ultimate Trading System", "UTS", overlay=false, max_bars_back=5000)

// ============================================================================
// ULTIMATE TRADING SYSTEM - PINE SCRIPT INDICATOR
// ============================================================================
// Combines multiple proven methodologies:
// 1. Pi Cycle Top Indicator
// 2. SPX/Gold Ratio Analysis  
// 3. Elliott Wave Analysis
// 4. Crypto Bull Market Strategy
// 5. Trading Parrot Multi-Source Analysis
// 6. Zeberg Business Cycles (simplified)
// ============================================================================

// INPUT PARAMETERS
// ============================================================================

// Pi Cycle Top Settings
pi_cycle_enabled = input.bool(true, "Enable Pi Cycle Top", group="Pi Cycle Top")
ma_111_length = input.int(111, "111-Day MA Length", minval=1, group="Pi Cycle Top")
ma_350_length = input.int(350, "350-Day MA Length", minval=1, group="Pi Cycle Top")

// SPX/Gold Ratio Settings
spx_gold_enabled = input.bool(true, "Enable SPX/Gold Analysis", group="SPX/Gold Ratio")
spx_symbol = input.symbol("SPY", "SPX Symbol", group="SPX/Gold Ratio")
gold_symbol = input.symbol("GLD", "Gold Symbol", group="SPX/Gold Ratio")
bubble_threshold = input.float(2.3, "Bubble Threshold", minval=1.0, step=0.1, group="SPX/Gold Ratio")

// Elliott Wave Settings
elliott_enabled = input.bool(true, "Enable Elliott Wave Analysis", group="Elliott Wave")
wave_length = input.int(50, "Wave Analysis Length", minval=10, group="Elliott Wave")
fibonacci_levels = input.bool(true, "Show Fibonacci Levels", group="Elliott Wave")

// Crypto Bull Strategy Settings
crypto_bull_enabled = input.bool(true, "Enable Crypto Bull Strategy", group="Crypto Bull Strategy")
sma_50w_length = input.int(350, "50-Week SMA (Daily Equivalent)", minval=100, group="Crypto Bull Strategy")
btc_target = input.float(200000, "Bitcoin Target Price", minval=50000, group="Crypto Bull Strategy")

// Trading Parrot Settings
tp_enabled = input.bool(true, "Enable Trading Parrot Analysis", group="Trading Parrot")
rsi_length = input.int(14, "RSI Length", minval=2, group="Trading Parrot")
volume_ma_length = input.int(20, "Volume MA Length", minval=5, group="Trading Parrot")
liquidity_lookback = input.int(100, "Liquidity Analysis Lookback", minval=20, group="Trading Parrot")

// Integration Settings
show_individual_signals = input.bool(true, "Show Individual Signals", group="Display")
show_integrated_signal = input.bool(true, "Show Integrated Signal", group="Display")
show_alerts = input.bool(true, "Enable Alerts", group="Display")

// Signal Weights
weight_pi_cycle = input.float(0.25, "Pi Cycle Weight", minval=0.0, maxval=1.0, step=0.05, group="Weights")
weight_spx_gold = input.float(0.20, "SPX/Gold Weight", minval=0.0, maxval=1.0, step=0.05, group="Weights")
weight_elliott = input.float(0.20, "Elliott Wave Weight", minval=0.0, maxval=1.0, step=0.05, group="Weights")
weight_crypto_bull = input.float(0.15, "Crypto Bull Weight", minval=0.0, maxval=1.0, step=0.05, group="Weights")
weight_trading_parrot = input.float(0.20, "Trading Parrot Weight", minval=0.0, maxval=1.0, step=0.05, group="Weights")

// ============================================================================
// HELPER FUNCTIONS
// ============================================================================

// Normalize signal to 0-100 range
normalize_signal(value, min_val, max_val) =>
    math.max(0, math.min(100, (value - min_val) / (max_val - min_val) * 100))

// Get external symbol data
get_external_data(symbol_id) =>
    request.security(symbol_id, timeframe.period, close)

// Calculate percentage change
pct_change(current, previous) =>
    previous != 0 ? (current - previous) / previous * 100 : 0

// ============================================================================
// PI CYCLE TOP INDICATOR
// ============================================================================

calculate_pi_cycle_signal() =>
    var float signal = 50.0
    
    if pi_cycle_enabled
        // Calculate moving averages
        ma_111 = ta.sma(close, ma_111_length)
        ma_350_x2 = ta.sma(close, ma_350_length) * 2
        
        // Pi Cycle logic: when 111MA crosses above 350MA*2, it's a top signal
        cross_above = ta.crossover(ma_111, ma_350_x2)
        cross_below = ta.crossunder(ma_111, ma_350_x2)
        
        // Calculate distance ratio
        distance_ratio = ma_350_x2 != 0 ? math.abs(ma_111 - ma_350_x2) / ma_350_x2 : 0
        
        // Signal calculation
        if ma_111 >= ma_350_x2
            // Lines have crossed - top signal (higher = more bearish)
            signal := 85 + (distance_ratio * 15)
        else
            // Distance to crossing (closer = higher signal)
            signal := 50 + (1 - distance_ratio) * 35
        
        signal := math.max(0, math.min(100, signal))
    
    signal

// ============================================================================
// SPX/GOLD RATIO ANALYSIS
// ============================================================================

calculate_spx_gold_signal() =>
    var float signal = 50.0
    
    if spx_gold_enabled
        // Get SPX and Gold data
        spx_price = get_external_data(spx_symbol)
        gold_price = get_external_data(gold_symbol)
        
        if gold_price > 0
            // Calculate ratio
            spx_gold_ratio = spx_price / gold_price
            
            // Historical analysis: ratios above bubble_threshold indicate danger
            if spx_gold_ratio > bubble_threshold * 1.1
                signal := 90 + math.min(10, (spx_gold_ratio - bubble_threshold * 1.1) * 20)
            else if spx_gold_ratio > bubble_threshold
                signal := 70 + ((spx_gold_ratio - bubble_threshold) / (bubble_threshold * 0.1)) * 20
            else if spx_gold_ratio > bubble_threshold * 0.9
                signal := 40 + ((spx_gold_ratio - bubble_threshold * 0.9) / (bubble_threshold * 0.1)) * 30
            else
                signal := 20 + ((spx_gold_ratio - bubble_threshold * 0.7) / (bubble_threshold * 0.2)) * 20
        
        signal := math.max(0, math.min(100, signal))
    
    signal

// ============================================================================
// ELLIOTT WAVE ANALYSIS
// ============================================================================

calculate_elliott_wave_signal() =>
    var float signal = 50.0
    
    if elliott_enabled
        // Simplified Elliott Wave analysis using price momentum and structure
        
        // Calculate price momentum over different periods
        momentum_short = ta.mom(close, wave_length / 5)
        momentum_medium = ta.mom(close, wave_length / 2)
        momentum_long = ta.mom(close, wave_length)
        
        // Calculate wave structure indicators
        high_20 = ta.highest(high, wave_length / 2)
        low_20 = ta.lowest(low, wave_length / 2)
        price_position = (close - low_20) / (high_20 - low_20)
        
        // RSI for momentum analysis
        rsi_wave = ta.rsi(close, wave_length / 3)
        
        // Elliott Wave signal logic
        // Higher values indicate late-stage waves (more bearish)
        wave_maturity = 0.0
        
        // Check for potential Wave 5 characteristics
        if momentum_long > 0 and momentum_medium > 0 and momentum_short < 0
            wave_maturity := 70 // Potential Wave 5 top
        else if rsi_wave > 70 and price_position > 0.8
            wave_maturity := 80 // Overbought in high position
        else if momentum_long < 0 and momentum_medium < 0
            wave_maturity := 30 // Corrective waves
        else if rsi_wave < 30 and price_position < 0.2
            wave_maturity := 20 // Oversold, potential Wave 2/4
        else
            wave_maturity := 50 // Neutral/trending
        
        signal := wave_maturity
    
    signal

// ============================================================================
// CRYPTO BULL MARKET STRATEGY
// ============================================================================

calculate_crypto_bull_signal() =>
    var float signal = 50.0
    
    if crypto_bull_enabled
        // 50-week SMA equivalent (using daily data)
        sma_50w = ta.sma(close, sma_50w_length)
        
        // Current progress toward target
        target_progress = close / btc_target
        
        // Bull market signal logic
        if close > sma_50w
            // Above 50-week SMA - bullish, but adjust based on target progress
            base_signal = 30 // Bullish base
            progress_adjustment = target_progress * 40 // Higher as we approach target
            signal := base_signal + progress_adjustment
        else
            // Below 50-week SMA - bearish
            distance_below = (sma_50w - close) / sma_50w
            signal := 60 + (distance_below * 40) // More bearish the further below
        
        signal := math.max(0, math.min(100, signal))
    
    signal

// ============================================================================
// TRADING PARROT MULTI-SOURCE ANALYSIS
// ============================================================================

calculate_trading_parrot_signal() =>
    var float signal = 50.0
    
    if tp_enabled
        // RSI Analysis (custom variant)
        rsi_standard = ta.rsi(close, rsi_length)
        rsi_volume_weighted = ta.rsi(close * volume, rsi_length) // Volume-weighted RSI
        
        // Volume Analysis
        volume_ma = ta.sma(volume, volume_ma_length)
        volume_ratio = volume / volume_ma
        
        // Liquidity Analysis (support/resistance strength)
        highest_lookback = ta.highest(high, liquidity_lookback)
        lowest_lookback = ta.lowest(low, liquidity_lookback)
        price_position_liquidity = (close - lowest_lookback) / (highest_lookback - lowest_lookback)
        
        // Pattern Recognition (simplified)
        // Look for potential cup & handle or breakout patterns
        ma_20 = ta.sma(close, 20)
        ma_50 = ta.sma(close, 50)
        pattern_strength = 0.0
        
        if close > ma_20 and ma_20 > ma_50 and volume_ratio > 1.2
            pattern_strength := 30 // Bullish pattern
        else if close < ma_20 and ma_20 < ma_50 and volume_ratio > 1.5
            pattern_strength := 70 // Bearish breakdown
        else
            pattern_strength := 50 // Neutral
        
        // SOPR-like calculation (simplified for Pine Script)
        // Using price vs moving average as proxy for profit/loss
        sopr_proxy = close / ta.sma(close, 100)
        sopr_signal = 0.0
        
        if sopr_proxy > 1.15
            sopr_signal := 80 // Heavy profit taking
        else if sopr_proxy > 1.05
            sopr_signal := 65 // Moderate profit taking
        else if sopr_proxy > 0.95
            sopr_signal := 45 // Neutral
        else
            sopr_signal := 25 // Loss taking/capitulation
        
        // Combine all Trading Parrot components
        tp_rsi_component = (100 - rsi_standard) // Invert RSI (lower RSI = more bullish)
        tp_volume_component = math.min(100, volume_ratio * 50)
        tp_liquidity_component = price_position_liquidity * 100
        tp_pattern_component = pattern_strength
        tp_sopr_component = sopr_signal
        
        // Weighted combination
        signal := (tp_rsi_component * 0.25 + 
                  tp_volume_component * 0.15 + 
                  tp_liquidity_component * 0.20 + 
                  tp_pattern_component * 0.20 + 
                  tp_sopr_component * 0.20)
        
        signal := math.max(0, math.min(100, signal))
    
    signal

// ============================================================================
// ZEBERG BUSINESS CYCLES (SIMPLIFIED)
// ============================================================================

calculate_zeberg_signal() =>
    var float signal = 50.0
    
    // Simplified Zeberg analysis using available market data
    // Focus on leading indicators that can be derived from price/volume
    
    // Leading indicator proxies
    price_momentum_long = ta.mom(close, 200) // Long-term momentum
    volume_trend = ta.sma(volume, 50) / ta.sma(volume, 200) // Volume trend
    volatility = ta.atr(20) / close // Relative volatility
    
    // Coincident indicator proxies  
    price_ma_200 = ta.sma(close, 200)
    price_vs_ma = close / price_ma_200 // Current vs long-term average
    
    // Lagging indicator proxies
    rsi_long = ta.rsi(close, 50) // Longer-term RSI
    
    // Zeberg-style analysis (currently bullish in real analysis)
    leading_strength = 0.0
    if price_momentum_long > 0 and volume_trend > 1.0
        leading_strength := 20 // Bullish leading indicators
    else if price_momentum_long < 0 and volume_trend < 0.8
        leading_strength := 80 // Bearish leading indicators
    else
        leading_strength := 50
    
    coincident_strength = 0.0
    if price_vs_ma > 1.1
        coincident_strength := 30 // Strong current conditions
    else if price_vs_ma < 0.9
        coincident_strength := 70 // Weak current conditions
    else
        coincident_strength := 50
    
    lagging_strength = 0.0
    if rsi_long > 70
        lagging_strength := 70 // Overbought (bearish)
    else if rsi_long < 30
        lagging_strength := 30 // Oversold (bullish)
    else
        lagging_strength := 50
    
    // Weighted combination (leading indicators have highest weight)
    signal := leading_strength * 0.5 + coincident_strength * 0.3 + lagging_strength * 0.2
    
    signal

// ============================================================================
// SIGNAL CALCULATIONS
// ============================================================================

// Calculate individual signals
pi_cycle_signal = calculate_pi_cycle_signal()
spx_gold_signal = calculate_spx_gold_signal()
elliott_signal = calculate_elliott_wave_signal()
crypto_bull_signal = calculate_crypto_bull_signal()
trading_parrot_signal = calculate_trading_parrot_signal()
zeberg_signal = calculate_zeberg_signal()

// Calculate integrated signal
total_weight = weight_pi_cycle + weight_spx_gold + weight_elliott + weight_crypto_bull + weight_trading_parrot
integrated_signal = total_weight > 0 ? 
    (pi_cycle_signal * weight_pi_cycle + 
     spx_gold_signal * weight_spx_gold + 
     elliott_signal * weight_elliott + 
     crypto_bull_signal * weight_crypto_bull + 
     trading_parrot_signal * weight_trading_parrot) / total_weight : 50

// ============================================================================
// VISUALIZATION
// ============================================================================

// Plot individual signals
plot(show_individual_signals ? pi_cycle_signal : na, "Pi Cycle", color.red, 2)
plot(show_individual_signals ? spx_gold_signal : na, "SPX/Gold", color.orange, 2)
plot(show_individual_signals ? elliott_signal : na, "Elliott Wave", color.blue, 2)
plot(show_individual_signals ? crypto_bull_signal : na, "Crypto Bull", color.green, 2)
plot(show_individual_signals ? trading_parrot_signal : na, "Trading Parrot", color.purple, 2)
plot(show_individual_signals ? zeberg_signal : na, "Zeberg Cycles", color.yellow, 2)

// Plot integrated signal
plot(show_integrated_signal ? integrated_signal : na, "Integrated Signal", color.white, 3)

// Reference lines
hline(80, "Strong Sell", color.red, linestyle=hline.style_dashed)
hline(60, "Sell", color.orange, linestyle=hline.style_dotted)
hline(50, "Neutral", color.gray, linestyle=hline.style_solid)
hline(40, "Buy", color.lime, linestyle=hline.style_dotted)
hline(20, "Strong Buy", color.green, linestyle=hline.style_dashed)

// Background coloring based on integrated signal
bgcolor(integrated_signal > 80 ? color.new(color.red, 90) : 
        integrated_signal > 60 ? color.new(color.orange, 90) : 
        integrated_signal < 20 ? color.new(color.green, 90) : 
        integrated_signal < 40 ? color.new(color.lime, 90) : na)

// ============================================================================
// ALERTS
// ============================================================================

if show_alerts
    // Pi Cycle Top Alert
    if pi_cycle_signal > 95 and pi_cycle_signal[1] <= 95
        alert("🚨 PI CYCLE TOP ALERT: Bitcoin showing extreme top signals!", alert.freq_once_per_bar)
    
    // SPX/Gold Bubble Alert
    if spx_gold_signal > 90 and spx_gold_signal[1] <= 90
        alert("💥 BUBBLE ALERT: SPX/Gold ratio at dangerous levels!", alert.freq_once_per_bar)
    
    // Integrated Signal Alerts
    if integrated_signal > 85 and integrated_signal[1] <= 85
        alert("🔴 EXTREME SELL SIGNAL: Multiple methodologies showing top!", alert.freq_once_per_bar)
    
    if integrated_signal < 15 and integrated_signal[1] >= 15
        alert("🟢 EXTREME BUY SIGNAL: Multiple methodologies showing bottom!", alert.freq_once_per_bar)

// ============================================================================
// TABLE DISPLAY
// ============================================================================

if barstate.islast and show_individual_signals
    var table info_table = table.new(position.top_right, 3, 8, bgcolor=color.white, border_width=1)
    
    table.cell(info_table, 0, 0, "Methodology", text_color=color.black, bgcolor=color.gray)
    table.cell(info_table, 1, 0, "Signal", text_color=color.black, bgcolor=color.gray)
    table.cell(info_table, 2, 0, "Status", text_color=color.black, bgcolor=color.gray)
    
    // Pi Cycle
    pi_status = pi_cycle_signal > 80 ? "SELL" : pi_cycle_signal > 60 ? "Caution" : pi_cycle_signal < 40 ? "BUY" : "Hold"
    pi_color = pi_cycle_signal > 80 ? color.red : pi_cycle_signal > 60 ? color.orange : pi_cycle_signal < 40 ? color.green : color.gray
    table.cell(info_table, 0, 1, "Pi Cycle", text_color=color.black)
    table.cell(info_table, 1, 1, str.tostring(math.round(pi_cycle_signal, 1)), text_color=color.black)
    table.cell(info_table, 2, 1, pi_status, text_color=color.white, bgcolor=pi_color)
    
    // SPX/Gold
    spx_status = spx_gold_signal > 80 ? "SELL" : spx_gold_signal > 60 ? "Caution" : spx_gold_signal < 40 ? "BUY" : "Hold"
    spx_color = spx_gold_signal > 80 ? color.red : spx_gold_signal > 60 ? color.orange : spx_gold_signal < 40 ? color.green : color.gray
    table.cell(info_table, 0, 2, "SPX/Gold", text_color=color.black)
    table.cell(info_table, 1, 2, str.tostring(math.round(spx_gold_signal, 1)), text_color=color.black)
    table.cell(info_table, 2, 2, spx_status, text_color=color.white, bgcolor=spx_color)
    
    // Elliott Wave
    elliott_status = elliott_signal > 80 ? "SELL" : elliott_signal > 60 ? "Caution" : elliott_signal < 40 ? "BUY" : "Hold"
    elliott_color = elliott_signal > 80 ? color.red : elliott_signal > 60 ? color.orange : elliott_signal < 40 ? color.green : color.gray
    table.cell(info_table, 0, 3, "Elliott Wave", text_color=color.black)
    table.cell(info_table, 1, 3, str.tostring(math.round(elliott_signal, 1)), text_color=color.black)
    table.cell(info_table, 2, 3, elliott_status, text_color=color.white, bgcolor=elliott_color)
    
    // Crypto Bull
    bull_status = crypto_bull_signal > 80 ? "SELL" : crypto_bull_signal > 60 ? "Caution" : crypto_bull_signal < 40 ? "BUY" : "Hold"
    bull_color = crypto_bull_signal > 80 ? color.red : crypto_bull_signal > 60 ? color.orange : crypto_bull_signal < 40 ? color.green : color.gray
    table.cell(info_table, 0, 4, "Crypto Bull", text_color=color.black)
    table.cell(info_table, 1, 4, str.tostring(math.round(crypto_bull_signal, 1)), text_color=color.black)
    table.cell(info_table, 2, 4, bull_status, text_color=color.white, bgcolor=bull_color)
    
    // Trading Parrot
    tp_status = trading_parrot_signal > 80 ? "SELL" : trading_parrot_signal > 60 ? "Caution" : trading_parrot_signal < 40 ? "BUY" : "Hold"
    tp_color = trading_parrot_signal > 80 ? color.red : trading_parrot_signal > 60 ? color.orange : trading_parrot_signal < 40 ? color.green : color.gray
    table.cell(info_table, 0, 5, "Trading Parrot", text_color=color.black)
    table.cell(info_table, 1, 5, str.tostring(math.round(trading_parrot_signal, 1)), text_color=color.black)
    table.cell(info_table, 2, 5, tp_status, text_color=color.white, bgcolor=tp_color)
    
    // Zeberg Cycles
    zeberg_status = zeberg_signal > 80 ? "SELL" : zeberg_signal > 60 ? "Caution" : zeberg_signal < 40 ? "BUY" : "Hold"
    zeberg_color = zeberg_signal > 80 ? color.red : zeberg_signal > 60 ? color.orange : zeberg_signal < 40 ? color.green : color.gray
    table.cell(info_table, 0, 6, "Zeberg Cycles", text_color=color.black)
    table.cell(info_table, 1, 6, str.tostring(math.round(zeberg_signal, 1)), text_color=color.black)
    table.cell(info_table, 2, 6, zeberg_status, text_color=color.white, bgcolor=zeberg_color)
    
    // Integrated Signal
    integrated_status = integrated_signal > 80 ? "STRONG SELL" : integrated_signal > 60 ? "SELL" : integrated_signal < 20 ? "STRONG BUY" : integrated_signal < 40 ? "BUY" : "HOLD"
    integrated_color = integrated_signal > 80 ? color.red : integrated_signal > 60 ? color.orange : integrated_signal < 20 ? color.green : integrated_signal < 40 ? color.lime : color.gray
    table.cell(info_table, 0, 7, "INTEGRATED", text_color=color.white, bgcolor=color.black)
    table.cell(info_table, 1, 7, str.tostring(math.round(integrated_signal, 1)), text_color=color.white, bgcolor=color.black)
    table.cell(info_table, 2, 7, integrated_status, text_color=color.white, bgcolor=integrated_color)

// ============================================================================
// END OF INDICATOR
// ============================================================================

